const contents = [
  {
    title: 'Command Line ＆ Shell Script',
    body:
      "# 基本環境介紹\n\n## 電腦介面－GUI 與 CLI\n\n平常我們打開電腦看到的界面就是 **GUI 圖形化界面**（ Graphical User Interface ），而 **CLI 命令行界面**（ Command-Line Interface ） 則是透過直接輸入 Command Line 來操作電腦，省下用滑鼠一步步點擊，系統再翻譯成 Command Line 的時間。\n\n## 建置環境\n\nWindows 系統可以開啟內建程式 **cmd.exe** 或稱**命令提示字元**使用 Windows  版本的 Command Line 語法進行操作。\n\niOS 系統可以開啟內建程式 **Termianl.app** 使用 iOS 與 Linux 通用的 Command Line 語法。\n\n在 Windows 系統下載 [**git**](https://git-scm.com/)，一路按「下一步」直到安裝完成，開啟 **git Bash** 就可以在 Windows 上使用 iOS 與 Linux 通用的語法。\n\n# iOS 與 Linux 通用的 Command Line 語法\n\n## 基本操作\n\n```bash\n#可以用來註解\nTab #可以用來自動補全程式碼\nq #可以跳出大部分狀態，回到指令輸入介面\n| #可以連接指令，把前面的輸出輸入到後面\n> #把輸出導向其他地方、檔案 Redirection\n>> #輸出導向檔案末\n右鍵 #可以開啟選單\n```\n\n## 查看資訊\n\n```bash\npwd #查看目前位址 Print Working Directory\ndate #查看目前時間 List Segment\nls #查看目前位址的檔案與資料夾清單 Change Directory\nls -l #更詳細的檔案與資料夾資訊\nman 指令 #查看指令說明，Windows 沒有\ntop #查看所有處理階段，Windows 沒有\nless #查看檔案內容\n```\n\n## 移動新增刪改\n\n```bash\ncd 位址 #移動至指定位址 Change Directory\ncd .. #移至上一層\ncd ~ #移至後目錄：/c/user/username\ncd / #移至根目錄：/\ntouch 檔案 #更新修改時間或建立檔案\nmkdir 資料夾 #新增資料夾 MaKe DIRectory\nrm 檔案 #刪除檔案 ReMove\nrm -f 檔案 #強制刪除受保護的檔案\nrm -r 資料夾 #把資料夾下的檔案刪光\nrmdir 資料夾 #刪除資料夾\nmv 檔案或資料夾 新名稱 #重新命名 MoVe\nmv 檔案或資料夾 資料夾 #移動至該資料夾\ncp 檔案 #複製\ncp -r 資料夾 #複製資料夾 \n```\n\n## 處理字串\n\n```bash\n#常藉 | 與其它指令前置連用\n#普通用法也可：指令 檔案 ''\ngrep '關鍵字' #搜尋\ngrep '關鍵字\\|關鍵字' #使用「或」需要 \\ 逃逸\ncut -d '分隔字元' #指定分隔字元，與 -f 連用\ncut -f '欄位' #擷取該欄，若分隔字元在首位，前仍有欄1\ncut -f '欄位,欄位' #擷取多欄位\ncut -b '起始bytes數,結尾bytes數' #範圍擷取\ncut -c '起始字元數,結尾字元數'\nsed '起始行數,結尾行數d' #刪除範圍，行$=最後一行\nsed 's/被取代字元/取代字元/g' #取代字元\nawk '行條件{指令l;指令2}' #預設 Tab 或空白分隔$欄位，$0代表所有欄位\necho '字串'/變數 #印出字串\n```\n\n## 網路相關\n\n```bash\nwget URL/檔案 #下載，不一定有內建\ncurl URL #送出 request 測試 API，印出網頁內容，測試自製的伺服器端\ncurl -s # Silent Mode：省略網頁內容外資訊\ncurl -X HTTP Method URL #發送 request \ncurl -I #印出 header\ncurl -H URL 'key: value' #設定要攜帶的 header\nroute print #印出IP\nnslookup URL #解析 domain 的 IP 位置\nping URL #測試連線，不斷發送封包\ntelnet 指定 port #測試指定 port 有沒有開，而且可以輸入 GET 等指令，拿到資料\ntelnet ptt.cc #拿來連 ptt，預設 23 port\n```\n\n## 其他\n\n```bash\nclear #清除所有指令\ncat #連接或顯示檔案\nvim 檔案 #開啟不一定有內建的 [vim 文字編輯器](https://www.notion.so/zoehyh/Vim-07805cb4c0d94b608a1436e822667df2)，無須新建檔案，儲存後即建立檔案\nvi 檔案 #基本陽春版\nredirection\nchmod 400 aws_key.pem #設定金鑰檔案的權限\nssh -i 金鑰檔案 主機名稱@ip #透過金鑰遠端連線 ip 上的主機\nssh -i aws_key.pem unbuntu@54.178.77.22\n```\n\n## 環境變數\n\n```bash\nexport #分享變數設定給後來呼叫的檔案或其他程序\n#直接在 cli 輸入，重開機就要再做一次\n#儲存設定：編輯下列檔案，加在末尾\n#系統變數：~/.profile，在圖形化介面不被執行不推薦：~/.bashrc, ~/.bash_profile, ~/.bash_login\n#使用者變數：/etc/profile、/etc/profile.d（資料夾），在圖形化介面不被執行不推薦：/etc/bash.bashrc\nexport 變數=值\n#下次登上遠端主機生效\n#立即生效\nsource 檔案\n$變數 #展示變數值\n```\n\n## 部署網站－ubuntu\n\n### mysql\n\n```bash\nsudo vim /etc/mysql/my.cnf #發現設定檔由其他資料夾裡的設定檔連結\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf #設定\nmysql -u root -p #進入 mysql [使用 SQL 語法](https://www.notion.so/ec27e519c9a34759b6a45d8fff286707)\n```\n\n- 設定\n\n```json\n[mysqld]\ninit-connect = 'SET NAMES utf8mb4'\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\n[client]\ndefault-character-set=utf8mb4\n```\n\n# Vim 文字編輯器\n\n可以在 CLI 內開啟的文字編輯器，分為插入模式與普通模式。\n\n## 普通模式\n\n一開始進入的模式。\n\n```bash\n:q #離開，Y/N 儲存檔案，C 取消\n:wq #存檔離開 Write and Quit\nV #一行一行選擇\nv #一字一字選擇\ny #複製選擇處\nd #刪除選擇處\np #貼上\nu #復原\n/欲搜尋字串\nn #繼續搜尋\ni #進入 insert 模式\no #在新一行進入 \n```\n\n## insert 模式\n\n輸入模式。\n\n```bash\nEsc #離開回到普通模式\n```\n\n# Shell Script\n\n## 介紹\n\nShell Script 是一種直接與電腦溝通的程式腳本，也是一種語言。\n\n## 建立檔案\n\n```bash\ntouch 檔案名稱.sh\n#!/bin/bash #第一行指定檔案種類\n#註解說明\n```\n\n## 執行檔案\n\n```bash\nchmod +x #賦予腳本擁有者執行權限\n#執行檔案\nbash 檔案.sh\nsh. 檔案.sh\n檔案位址\n```\n\n## 程式內容\n\n### 變數\n\n```bash\n${0} #此變數值為檔案名稱\n${1} #此變數值為執行時，檔案名後的第一個變數\nread 變數名稱 #執行到此行，使用者需輸入內容\nread -p\"敘述\" 變數 #附帶敘述\nvar='' #指定變數，不可空格\nvar=$(指令)\n$var #使用指令，輸出指令值\necho 變數 #印出\n```\n\n### 迴圈\n\n```bash\nfor((i=初始值;i判斷式;i+-間隔)) #可用 ++/--\ndo\n\t指令\ndone\n```",
    CategoryId: 1
  },
  {
    title: 'Git  & GitHub 版本控制',
    body:
      '# Git 與 GitHub\n\nGit 是一個版本管理系統，應對同時存在1-4、5-7、8-9......等各種版本的情境。\n\nGitHub 則是一個雲端服務，讓工程師們可以遠端管理程式。\n\n# 檔案狀態\n\n1. Untracked 未追蹤\n2. Modified 已修改 in Working Directory\n3. Staged 暫存 in Staging Area\n4. Committed 已儲存 in Repository\n\n# 基本操作指令\n\n## 初始化\n\n```bash\ngit init #在這個位址建立 .git 資料夾\ngit add 檔案/. # Untracked/Modified 的該/全部檔案變 Staged\ngit commit # Staged 需 vim 添加\'敘述\'，全部 Committed\ngit commit -m"版本敘述" #不用開 vim\ngit commit -am"版本敘述" # Modified 檔案全部 Committed，不含 Untracked\ngit commit -amend # push 前可修改敘述\n```\n\n## 查看移動\n\n```bash\ngit status #查看檔案的狀態階段\ngit log #版本、Branch 歷史紀錄\ngit log --oneline #簡短資訊\ngit checkout 六碼版本代碼/ Branch #進入該版本、Branch\ngit diff #比較 Modified 檔案與上一版本差異\ngit diff 檔案 #比較 Modified 的本檔案與上一版本差異\ngit diff 版本代號 #比較 Modified 檔案與該版本差異\ngit diff 版本代號 版本代號 #比較兩版本差異\ngit show #詳列修改內容\ngit help 指令 #查詢說明\ngit 指令 --help\n```\n\n## 版本控制刪改\n\n### 加到忽略名單\n\n```bash\ntouch .gitignore #建立名單\nvim .gitignore #編輯名單加入檔案名稱\n```\n\n- `**/`會選到全部資料夾\n- `*.檔案種類`會選到每一個這個種類的檔案\n\n### 檔案的版本控制刪除\n\n```bash\ngit rm --cached 檔案 #該檔案變 Untracked\ngit rm --cached -r . #全部檔案變 Untracked\n```\n\n### 檔案的版本控制移出暫存\n\n```bash\ngit reset HEAD 檔案 # Staged 變 Modified，移出暫存\n```\n\n### 檔案內容倒退版本\n\n```bash\ngit checkout -- 檔案/. #檔案內容回版本\n```\n\n### 已儲存的版本控制倒退\n\n```bash\ngit reset HEAD^ #倒退一次，回到上個 commit\ngit reset HEAD^ --hard #連修改都捨棄，回上個 commit\ngit reset HEAD^ --soft #保留檔案的修改，回上個 commit\ngit reset 版本 #回到指定版本\n```\n\n## 個人化\n\n```bash\ngit config --global alias.縮寫 原指令 #常用指令縮寫\n```\n\n# 連結遠端\n\n## 新建專案新建內容\n\n```bash\n#創建同名資料夾\necho "# test" >> README.md\ngit init\ngit add README.md\ngit commit -m "敘述"\ngit remote add origin 專案URL\ngit push -u origin master\n```\n\n## 新建專案上傳本地專案\n\n```bash\ngit remote add origin 專案URL\ngit push -u origin master\n```\n\n## 專案下載 － fork\n\n```bash\ngit clone URL #自動連結\n```\n\n## 更新\n\n```bash\ngit push #上傳更新\ngit push origin 分支\ngit push -f origin 分支 #複寫遠端分支\ngit pull #下載更新，等於 fetch 加 merge\ngit fetch #下載\n```\n\n## 他人遠端專案同步到本地\n\n```bash\n#方法一\ngit remote -v #檢視遠端節點\ngit remote add 節點名稱 專案網址 #增加節點\ngit fetch 節點名稱\ngit merge 被合併的目標分支\n#方法二\ngit pull 節點網址 分支\n#上傳到自己的專案\ngit push\n```\n\n# Branch\n\n會複製原本分支，包含版本控制紀錄。\n\n團隊平行開發時使用，可從不同版本拉出分支開發，最後再合併 Merge 。\n\n### 搭配 git checkout 跳轉\n\n## 基本操作\n\n```bash\ngit branch 分支名稱\ngit branch -d 分支 #刪除\ngit branch -m 分支名稱 #修改名稱\ngit push --set-upstream origin #第一次上傳 Branch\ngit push -u origin 分支 #簡短\ngit checkout 分支 #下載專案的遠端分支\n```\n\n## 查看\n\n```bash\ngit branch -v #詳列分支清單\ngit branch -a #列分支清單\n```\n\n## 融合\n\n```bash\ngit merge 另一分支 #當前分支被另一分支融入\n```\n\n## 衝突\n\n```bash\n#衝突內容會被標示\ngit status #查詢衝突檔案\nvim 檔案 #手動修改\ngit commit -am "版本敘述" #儲存\n```\n\n# Git Hook\n\n偵測某個訊號，發生什麼事就通知我，在 .git 資料夾裡的 hook 資料夾。\n\n# GitHub\n\n## 連結 GitHub 帳戶\n\n### HTTPS\n\n```bash\ngit config --global user.name "帳戶名稱"\ngit config --global user.email "email"\n```\n\n### SSH：RSA 加密演算法\n\n```bash\n#先查詢無 ~/.ssh\nssh-keygen -t rsa #出現已有金鑰的訊息就NO\n# GitHub 帳戶→設定→ SSH and GPG keys →貼上 id_rsa.pub\nssh -T git@github.com #測試，初次連線需要確認\n```\n\n## GitHub Workflow\n\n一套命名與融合分支的流程。\n\n- master：主程式，被合併，不開發\n- hotfix：主緊急修復，來自 master （ develop 可能開發中），併到 master 和 develop\n- release： 主測試，來自 develop，併到 master 與 develop\n- develop：主開發，來自 master，併到 release\n- feature：主額外功能，來自也併回 develop\n\n## GitHub 功能\n\n- Issue：討論區\n- Setting：可以調整權限\n- Pages：免費靜態網頁空間\n- Pull Requests：上傳分支並請求合併\n\n## 競爭對手\n\nGitLab 與 Bitbucket 。',
    CategoryId: 1
  },
  {
    title: 'HTML',
    body: 
    "# HyperText Markup Language\n\n有結構的文字檔，index.html 是主頁面的預設名稱，含有 [CSS](https://www.notion.so/zoehyh/CSS-ec54f5eb6ea542088e6f77fcedc5c390) 與 [JavaScript](https://www.notion.so/zoehyh/JavaScript-6eb3954a671945c6b1afe4e2fb20b531) 的 HTML 檔案就是靜態網頁的基本。\n\n## 格式\n\n- `<標籤></標籤>`\n- `<標籤>`或`<標籤/>`，因為中間沒內容\n\n## 基本設定\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\"> <!-- 否則中文變亂碼 -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <!-- 響應式設計 -->\n    <title>網頁標題</title>\n\t\t\n\t\t<link rel=\"shortcut icon\" href=\"favicon.ico 網站標題旁縮圖\">\n    <meta name='description' content='網站描述文字' />\n\n    <meta property=\"og:title\" content=\"臉書的標題\" />\n    <meta property=\"og:description\" content=\"臉書的描述\">\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:url\" content=\"臉書上的網址\" />\n    <meta property=\"og:image\" content=\"臉書的圖片\" /> <-- 1200*628 -->\n\n    <link href=\"圖片路徑\" rel=\"apple-touch-icon\" /> <-- 加桌面的縮圖 -->\n\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" /> <-- 優化到最佳效能 -->\n    <!-- 載入 CSS JS -->\n</head>\n```\n\n- `<link rel=\"stylesheet\" href=\"CSS檔案路徑\">`先載入畫面\n    - `media=\"放入 media 設定\"` 設定在哪些媒體上載入，`screen`、`print`、`orientation:landscape`\n- `<script type=\"text/javascript\" src=\"JS檔案路徑\"></script>` [可優化](https://www.notion.so/JavaScript-a9da74a2e04c4d20afb53a661ad2f439)\n\n## 文本標籤\n\n- `<h1>`~`<h6>`一般不使用全部\n- `<p>`可使用亂數文字`Lorem`充內容看效果\n\n## 分組標籤\n\n- `<div>`包住其他標籤以分組\n- `<span>`包住要使用特別樣式的文字\n\n## 影音標籤\n\n- `<img src=\"圖片位址\" title=\"鼠標移入顯示\" alt=\"圖片不顯示時替代文字\">`\n    - `srcset=\"圖片位址 2x,圖片位址 3x\"`@2x、@3x 圖的放法，適合大小不需響應式改變的設計\n    - `srcset=\"圖片位址 圖片實際寬度w\" sizes=\"(min-width: 600px) 設計所需寬度px, 設計所需寬度vw\"`在載入前先告訴瀏覽器寬度，自動計算最適合的版本\n- `<audio controls>`\n    - `<source src=\"檔案位址\" type=\"audio/ogg或audio/mpeg\">`\n    - 後面可以直接加文字，提醒使用者瀏覽器不支援\n\n## 清單標籤\n\n```html\n<ul>\n    <li>無序清單的第一項</li>\n</ul>\n<ol>\n    <li>有序清單的第一項</li>\n</ol>\n```\n\n## 格式標籤\n\n- SEO 有強調：`<strong>`、`<em>`\n- SEO 無強調：`<b>`、`<italic>`\n- 其它：`<s>`刪除線、`<u>`底線、`<hr>`一條水平線\n\n```html\n<pre>\n    保存完整格式，連同空格與換行或程式碼。\n</pre>\n<br> <!-- 插入文字間就會換行 -->\n\n```\n\n## 連結標籤\n\n### 超連結標籤\n\n可以包文字或圖片。\n\n```html\n<a href=\"連結\" target=\"_self\">預設在此頁面開啟連結</a>\n<a href=\"連結\" target=\"_blank\">在新頁面開啟連結</a>\n<a href=\"#id\">將 id 當錨點用，只有 # 會回開頭</a>\n```\n\n### 按鈕標籤\n\n可放入文字、圖片等等。\n\n```html\n<button type=\"button\">按鈕文字</button>\n```\n\n## 表格標籤\n\n```html\n<table> <!-- 建立表格 -->\n    <tr> <!-- 建立一列 -->\n        <th>標題一</th> <!-- 建立一個標題欄位 -->\n        <th>標題二</th>\n        <th>標題三</th>\n    </tr>\n    <tr>\n        <td>1</td> <!-- 建立一個內容欄位 -->\n        <td>2</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>一</td>\n        <td>二</td>\n        <td>三</td>\n    </tr>\n</table>\n```\n\n## 表單標籤\n\n送出後由 PHP 或 Ruby 等程式語言處理，content type 有三種`text/plain、application/x-www-form-urlencoded`、`multipart/form-data。`\n\n- `<form method=\"請求方法\" action=\"資料庫位置\">`裡面也可以放其它標籤，若這樣發送請求，瀏覽器會直接渲染回應，即換頁\n    - `<fieldset>`可選擇為輸入分組\n        - `<legend>`包裹分組敘述\n    - `<label for=\"連結欄位的 id\">文字說明</label>`\n    - 輸入\n        - 屬性\n            - `required`必須填入\n            - `checked`預設選中\n        - `<input type=\"選項\" id=\"同 name\" name=\"欄位名稱\">`\n            - `type=\"text\" placeholder=\"欄位空值時的說明\"`\n            - `type=\"password\"`自動隱藏密碼\n            - `type=\"email\"`自動檢查格式\n            - `type=\"date\"`\n            - `type=\"radio\" value=\"各選項的不同值\"`，標籤結束放選項文字，可用`<label>`包裹，不可複選\n                - 選項的`name`不一樣就可以複選，但沒意義\n            - `type=\"checkbox\" value=\"各選項的不同值\"`可複選\n            - `type=\"button\"`JavaScript 控制效果\n            - `type=\"submit\" value=\"要顯示的按鈕名稱\"`\n            - `type=\"hidden\" value=\"資訊\"`可以用來傳入額外資訊給後端\n            - `type=\"file\"`\n                - `accept=\"接受檔案\"`\n                    - `.副檔名`\n                    - 網際網路媒體型式：`image/*`、`text/html`、`video/*`、`audio/*`\n                    - 以上可用`,`組合指定\n        - `<select name=\"欄位名稱\">`下拉式選單\n            - `<option value=\"\" selected disabled hidden>預設說明文字</option>`\n            - `<option value=\"各選項的不同值\">選項文字</option>`\n        - `<textarea name=\"多行欄位名稱\"></textarea>`\n            - `cols=\"數字\" rows=\"數字\"`少用，多用 CSS 設定\n- 加上CSS\n    - `cursor: pointer;`變換鼠標樣式。\n    - Pure.css 框架很適合作表單基底，很適合參考。\n\n## Sementic Elements 語意化元素 － UI 標籤\n\n讓人或電腦看懂這些區塊的作用，`<h1~6>`也是其中一種，沒有功能，用來為元素分組。\n\n### 主要區塊\n\n區分外層版面。\n\n- `<header>`也可選擇放入`<article>`或`<section>`\n- `<nav>`\n- `<aside>`\n- `<main>`\n    - `<section>`內容分類區塊，可選擇放入`<article>`\n- `<footer>`\n\n### 文章區塊\n\n依據內容可以互相包裹。\n\n- `<article>`文章內容分類區塊，可選擇放入`<section>`\n    - `<hgroup>`標題組\n    - `<cite>`引述用標題\n    - `<mark>`強調一小塊內容\n    - `<details>`描述文章細節\n\n### 其它\n\n- `<time datetime=\"YYYY-MM-DDThh:mm:ssTZD\">`可以依照格式填入日期，讓電腦讀懂所包裹文本代表的日期。\n    - `T`必須的分隔符號，可使用空白\n    - `hh`24小時制\n    - `TZD`指定時區，`Z`代表格林威治時間\n- `<figure>`可以包裹多個影像標籤\n    - `<figcaption>`圖像標題標籤，可包含多個文本標籤，只能放一個在`<figure>`頭或尾。\n\n## 嵌入標籤\n\n```html\n<iframe src=\"要嵌入的其他網頁\"></iframe> <!-- 很多網頁會擋 -->ㄥ\n```\n\n## SEO 相關標籤\n\nSearch Engine Optimization，幫助搜尋引擎理解網頁。\n\n```html\n<meta name=\"keywords\" content=\"\">\n<meta name=\"description\" content=\"\">\n<meta property=\"og:title\" content=\"\">\n<!-- Open Graph Protocol 讓搜尋引擎，通常是 Facebook 更了解網頁 -->\n<meta property=\"og:description\" content=\"\">\n<meta property=\"og:image\" content=\"\">\n<script type=\"application/+json\">\n{\n    \n}\n</script>\n<!-- JSON for Linking Data -->\n```\n\n### 網站下的 robots.txt\n\n- 允許與不允許爬蟲的頁面\n- Sitemap.xml 網站的地圖\n\n## 跳脫 Escape\n\n讓標籤顯示為內容。\n\n```html\n&lt; → <\n&gt; → >\n&amp; → &\n&amp; → \"\n&amp; → '\n```",
    CategoryId: 1
  },{
    title: "網路協定與 API",
    body: "# 構造\n\n\n\n## 客戶端 Client 與 伺服器端 Server\n\n\n\n你的瀏覽器身為客戶端的一種，會發送請求 Request 到伺服器，伺服器端收到 Request 開始處理資料，完成會回傳回應 Response 到客戶端。\n\n\n\n## 路由器 Router（Default Gateway）傳遞訊息\n\n\n\n網路服務供應商 ISP 的路由器能夠在各個 IP 位置與路由器間傳遞訊息。\n\n\n\n## 連接埠 Port\n\n\n\n不同的協定服務或程式監聽不同的連接埠，讓訊息的傳遞不致混淆。\n\n\n\n## 請求 Request 與 回應 Response\n\n\n\n### Header 額外資訊\n\n\n\n跟行為本身有關的資訊，請求與回應欄目不同，例如：method 只有 HTTP 的請求有。\n\n\n\n### Body 主要內容\n\n\n\n跟交換內容有關的資料。\n\n\n\n# 網路協定 － TCP/IP 四層模型\n\n\n\n透過海底電纜傳輸，IP 位置規範位置， 傳送資料時透過 TCP 確保收發正常或 UDP 確保即時性，實際應用是透過 HTTP 或 FTP 標準化傳輸內容。\n\n\n\n## 網路存取層 Network Access － 海底電纜\n\n\n\n## 網路互連層 Internet － 網際協定位址 Internet Protocol Address\n\n\n\n簡稱 IP 位置，網址背後代表的代碼，每一個能連上網的機器都有專屬的代碼，標示機器在網際網路中獨一無二的位置。傳輸時必須透過 IP 位置，而不是語意化的網址。\n\n\n\nIPv4 表現為 W.X.Y.Z ，每組都是 0~ 255 的數字，即 32 位元，有 $2^{32}$ 種可能組合，即將用盡，因此推出了 IPv6 ，有 $2^{128}$ 種組合。\n\n\n\n### 固定 IP\n\n\n\n不會改變，可以直接連線，例如：伺服器端。\n\n\n\n### 浮動 IP\n\n\n\n同一台電腦每次連線都不同 IP ，安全性高。\n\n\n\n### 虛擬 IP\n\n\n\n很多時候普通使用者不需要專屬的 IP，所以由數據機發配僅供內網使用的 IP 位置 ，通常是 [192.168.0.XXX](http://192.168.0.XXX) ，對外則使用數據機的 IP 位置，就像相對位置與絕對位置。\n\n\n\n### 本機\n\n\n\n- [localhost](http://localhost) 本地伺服器\n\n\n\n    不經網卡傳輸，不受防火牆與網卡相關限制。 系統帶著本機當前使用者的許可權去訪問本機。\n\n\n\n- 127.0.0.1 本機地址\n\n\n\n    依賴網卡傳輸，受防火牆與網卡相關限制，系統通過網路連回本機。\n\n\n\n## 傳輸層 Transport\n\n\n\n### TCP（Transmission Control Protocol）\n\n\n\n保證連線的可靠，大部分協定使用 TCP 。\n\n\n\n- Three-way Handshake：傳送封包，甲傳給乙收到，乙就確定了接收功能無誤，回傳給甲收到，甲就確定了收發功能皆無誤，甲再回傳，乙也就確定了發送功能也無誤。\n\n\n\n### UDP（User Datagram Protocol）\n\n\n\n不保證收發功能，而以即時傳輸為主，例如即時通話或視訊。\n\n\n\n### SSL/TLS 安全通訊協定（Secure Sockets Layer）/ 傳輸層安全性協定（Transport Layer Security）\n\n\n\nSSL含有記錄層（Record Layer）協定確定傳輸層資料的封裝格式，與傳輸層安全協定保證通訊的保密性和可靠性，不被攻擊者竊聽。 SSL 標準化成 TSL ，SSL 是 TSL 的前身。\n\n\n\n## 應用層 Application － 協定\n\n\n\n### HTTPS 超文本傳輸安全協定（HyperText Transfer Protocol Secure）\n\n\n\n目前主流的網路協定，經由 HTTP 進行通訊，但利用 SSL/TLS 來加密封包。\n\n\n\n### HTTP 超文本傳輸協定（HyperText Transfer Protocol）\n\n\n\n其中一種網路協定，約定傳輸的方法與內容格式，標準化以便通用推廣，使用 TCP。\n\n\n\n- `Server IP：80`：告訴伺服器主機要使用`TCP Port 80`也就是 HTTP 這項協定，使用瀏覽器時已預設。\n\n- 規範 header 額外資訊的格式\n\n    - 客戶端與伺服器端的 IP 位置\n\n    - method：GET 、 POST\n\n    - scheme：網路協定版本\n\n    - path：通常會用 /  根目錄代表默認的檔案， index.html 之類\n\n- 請求方法 Request Method\n\n    - `Get`：常用來請求資料，將資料以 Query String 的方式加在網址後傳遞，不允許用 body 傳資料\n\n    - `Post`：將資料放入 body 裡傳遞，因為資料不會透過網址傳出，比較不易外洩\n\n    - `Put`：取代整個 request\n\n    - `Patch`：修改部分 request\n\n    - `Delete`：刪除資源\n\n    - `Head`：只要 header，不要 body\n\n    - `Option`：可以暸解 server 提供哪些溝通方法\n\n- `Server IP：80`：告訴伺服器主機要使用 HTTP 這項協定\n\n- 狀態碼 HTTP Code\n\n    1. 稍等\n\n        - `100`Continue ：伺服器端成功接收，但客戶端還要處理\n\n    2. 成功\n\n        - `200`OK ：成功\n\n        - `204`No Content ：成功但沒有內容，例如發送 delete 請求時\n\n        - `206`Partial Content：部分 GET 成功處理，下載工具用來做斷點續傳、大文件分解下載\n\n    3. 重新導向\n\n        - `301`Moved Permanently ：header 說明目標已永久移位，瀏覽器會儲存並在下次自動傳到新位置\n\n        - `302` Found（Moved Temporarily）：header 說明目標暫時移位，瀏覽器不會儲存並傳到新位置\n\n        - `304` Not Modified：資料不變，直接從快取拿\n\n        - `307`Temporary Redirect：302 的 POST 版\n\n        - `308` Permanent Redirect：301 的 POST 版\n\n    4. 客戶端錯誤\n\n        - `400`Bad Request：語法錯誤、資源太大......\n\n        - `401`Unauthorized：未認證，可能需要登入或 Token\n\n        - `403`Forbidden：沒有權限\n\n        - `404`Not Found：找不到資源\n\n        - `405`Method Not Allowed：大部分伺服器接收到`PUT`或`DELETE`改寫資源的請求時使用，回覆的 Allow Header 資訊會列出可用請求\n\n        - `415`Unsupported Media Type：上傳檔案格式不支援。\n\n    5. 伺服器端錯誤\n\n        - `500`Internal Server Error：伺服器出錯，例如搶票時\n\n        - `501` Not Implemented\n\n        - `502` Bad Gateway：通常是伺服器的某個服務出錯\n\n\n\n### SMTP\n\n\n\n告訴伺服器要使用`TCP Port 25`，E-mail 使用的協定。\n\n\n\n### FTP（File Transfer Protocol）\n\n\n\n其中一種網路協定，使用`TCP Port 21`。\n\n\n\n- `Server IP：21`：告訴伺服器主機要使用 FTP 這項協定\n\n\n\n# 互動順序\n\n\n\n1. 客戶端發送請求 Request\n\n\n\n    告訴伺服器端你想取得某些資料，例如：一個網頁。\n\n\n\n2. DNS（Domain Name System）轉化\n\n\n\n    客戶端會先連上 DNS 伺服器，請它調出資料，回傳域名 Domain Name 或主機名稱 Host Name 對應的 IP 位置。\n\n\n\n    - 層級 Hierarchy：如果所屬 DNS 伺服器沒有這個少見網址的資料，所屬伺服器會轉向較上層級的伺服器請求資料。\n\n        1. Root Level ：記錄了哪些伺服器知道哪些域名，最高層級的伺服器。\n\n        2. Top-level Domains\n\n        3. Second-level Domains\n\n        4. Sub-Domains / Third-level Domain\n\n        5. Host\n\n3. 伺服器端發送回應 Response\n\n\n\n    伺服器端接收請求後處理資料並發送回應。\n\n\n\n4. 客戶端發送其它請求獲得回應\n\n\n\n    瀏覽器解析回應的 HTML 並發現需要其它元素，例如：CSS 、 JavaScript 、圖片、影片，發送這些元素的請求，獲得回應，也就是下載資源。\n\n\n\n5. 瀏覽器渲染網頁\n\n\n\n# 資料格式\n\n\n\n在任何程式語言皆可使用的資料格式。\n\n\n\n## XML（Extensible Markup Language）\n\n\n\n跟 HTML 一樣是標記語言。\n\n\n\n```xml\n\n<user>\n\n  <id>1</id>\n\n</user>\n\n```\n\n\n\n## JSON（JavaScript Object Notation）\n\n\n\n格式就是 JavaScript 物件，但型別是字串。\n\n\n\n### 資料處理\n\n\n\n- `JSON.parse(資料)`將字串轉成物件，但要小心字串格式不是物件會導致錯誤\n\n- `JSON.stringify(物件)`將物件轉成字串\n\n\n\n# API （Application Programming Interface）\n\n\n\n## 交換資料的介面\n\n\n\n我們一般聽到的是 Web API 在網路交換資料，其實電腦裡不同程式交換資料也是透過 API 。\n\n\n\n## 可供串接\n\n\n\n我們可以通過串接 API 拿到別人願意開放的資料。\n\n\n\n### 帶參數的方式要看 API 怎麼支援\n\n\n\n- 大量參數用`POST`放 Header\n\n- `GET`加上網址後輟的 Query String：`?key=value&key=value`\n\n    - `%20`代表空白\n\n\n\n## Web API = HTTP API\n\n\n\n通常就是在 HTTP 協定下的 API。\n\n\n\n## SDK （Software Development Kit）\n\n\n\n資料都包裝好了，直接使用裡面的函式拿資料，不需要串接 API。\n\n\n\n## [RESTful](https://www.notion.so/zoehyh/PHP-MySQL-dd82884520b9422285bec713ffad2c51#9e6cf80b93bc4eb98af344831e78dd84)\n\n\n\nAPI 風格的規範，雖然我們可以直接透過 API 連結後輟的不同分別進行刪除、查詢等不同功能，但如果這個 API 設定的 HTTP Method  有符合 CRUD 原則，並且設定語義化的網頁路由，例如：user/5 、 article/limit_10 等，就是 RESTful 的 API 。\n\n\n\n### CRUD 原則\n\n\n\n- Create ：`POST`\n\n- Return ：`GET`\n\n- Update ：`PUT`\n\n- Delete ：`DELETE`\n\n\n\n# SOAP（Simple Object Access Protocal）\n\n\n\n目前少用，以 HTTP 協定，透過 XML 格式傳遞資料，會使用node-soap library 以增加效率。\n\n\n\n# 非同步－Race Condition\n\n\n\n發送有先後順序，但處理時間不同，會導致回應順序不一定相同，如果要讓結果可預測，就要確保先發送的請求處理完成，拿到回應，再發送後面的請求。",
    CategoryId: 1
  },{
    title: "系統架構",
    body: "# Vertical Scaling\n\n\n\n投資更好的設備以解決問題。提升硬體表現，提升 RAM、dick、CPU 等等。\n\n\n\n# Horizontal Scaling\n\n\n\n使用更多成本低廉的設備解決問題，例如在後端使用更多伺服器。\n\n\n\n## Load Balancer 負載平衡器\n\n\n\n當客戶端輸入網域，DNS 會返回負載平衡器的 IP 位址，負載平衡器再將請求分配給不同伺服器，以免單一伺服器過載，負載平衡器擁有公開 IP 位址，各個伺服器就只需要私人 IP 位址。\n\n\n\n同時可有兩臺負載平衡器，HA 較高，減輕負擔並以防停機。\n\n\n\n- High Availibility：無中斷執行的能力，會互傳資料，確認對方還在運作\n\n- active－active：兩臺同時運作，一臺停機還有一臺。\n\n- active－passive：active 運作，傳送資料給另一臺確認還在運作，等 passive 發現 active 停機便會自動提升為 active。\n\n\n\n## Servers 伺服器\n\n\n\n### 分配與配置\n\n\n\n負載平衡器其實就是 DNS，藉由端口 tcp 80 傳輸到伺服器。\n\n\n\n- 循環分配伺服器，每個伺服器需擁有同樣內容\n\n- 依功用配置與分配伺服器，PHP、HTML 等由不同伺服器負責，單一伺服器可能負擔過重\n\n\n\n### Session 工作階段儲存\n\n\n\n- 狀態只存在一個伺服器上會有停機風險\n\n    - 依功用一個伺服器或負載平衡器存狀態\n\n    - 循環分配則導致下次分配到不同伺服器就失去狀態\n\n- Sticky Session：即使重複請求也會保留狀態，回到同一伺服器\n\n    - 存在 Cookie 中\n\n\n\n### Caching 緩存\n\n\n\n- 伺服器：緩存回應，用戶不需要重複請求 IP 位址，也讓其他用戶避開這個伺服器\n\n    - 保留的時間稱為 TTL\n\n- PHP 重新編譯：緩存編譯結果\n\n    - 編譯出原始靜態內容，HTML 等緩存，但會佔用儲存空間，且不好更改\n\n    - 用 MySQL 資料庫儲存\n\n    - 用 memcached 儲存在 RAM，以存取頻率來決定是否刪除該用戶資料\n\n\n\n## RAID 容錯式磁碟陣列\n\n\n\n讓電腦把多個磁碟當作一個。\n\n\n\n- RAID 1：硬碟分兩組，相互鏡像，主硬碟損壞時，鏡像硬碟可以接替工作。\n\n- RAID 5：其中一組硬碟作為鏡像硬碟，其他硬碟都可以正常使用。\n\n- RAID 6：損壞兩組硬碟才會真正損壞硬碟。\n\n\n\n## Databases 資料庫\n\n\n\n- Replication：自動複製，資料庫間互相連線複製\n\n- 一個資料庫備用，其他資料庫平衡負載，同時以功能分配資料庫\n\n- master－slaves：master 對 slaves 會進行 Replication，停機後 slaves 會自動提升為 master，少用功能由 master 直接處理，常用功能可由負載平衡器透過 tcp 3306，分配給 slaves 處理\n\n- master－master：master 互相進行 Replication，再與各自的 Slave 做 Replication\n\n    - High Availibility：讓負載平衡器分配請求，同時運用兩個 master\n\n- Partitioning：兩臺負載平衡器負責不同用戶，再將請求分別傳送各自的slaves，兩組 slaves 都會與 master 進行 Replication。",
    CategoryId: 1
  },{
    title: "正規表達式",
    body: "# 簡介\n\n\n\n可以用來查找、驗證、抽取資料。\n\n\n\n# `/規則/`\n\n\n\n- 包住規則\n\n    - `/規則/g`比對全部，不只比對一次\n\n- `字符`直接輸入字元比對是否相同\n\n- `[多個字符]`比對字串中的一個字元至少符合一個字符\n\n- `(規則)`輸出時特別抓出符合的字串\n\n- `{重複次數}`、`{重複 n , 到 m 次}`、`{重複次數 , 以上}`\n\n\n\n## 代表\n\n\n\n- `.`任意字元\n\n- `\d`一個數字\n\n- `\D`一個非數字\n\n- `\w`一個數字、字母、底線\n\n- `\W`一個非數字、非字母、非底線\n\n- `\s`任何空白、tab、換行\n\n\n\n## 符號\n\n\n\n- `-`連續字元\n\n    - `[0-9]`、`[a-z]`、`[A-Z]`、`[0-9a-z]`、`[a-zA-Z0-9_]`\n\n    - `0-9a-zA-Z`\n\n- `^規則`第一位開始須符合\n\n- `規則$`最末位須須符合\n\n- `規則+`該規則可以有一個以上符合\n\n- `規則*`該規則有沒有符合皆可\n\n- `規則?`配對到的組合越少越好",
    CategoryId: 1
  },{
    title: "產品規劃",
    body: "# Product Spec 產品規格\n\n\n\nPM 負責，功能需要盡量完整，工程師會按照規格開發，開發上已有寫的功能為主。\n\n\n\n# User Story\n\n\n\nP1 身為使用者，我希望...這樣我就可以...\n\nP2 優先度較後\n\n\n\n# 任務管理\n\n\n\n## 任務 Task = 卡片 Card = 票 Ticket = 問題 Issue\n\n\n\n- Trello、Jira：ticket\n\n- Github：issue\n\n\n\n# 方法論\n\n\n\n## Waterfall 瀑布流\n\n\n\n按部就班，一個階段完成進入下一階段，中途不能插入其他階段的事務。\n\n\n\n## Agile 敏捷\n\n\n\n快速迭代，以經常交付為原則，小循環、較彈性，有十二個原則。\n\n\n\n### Kanban\n\n\n\n- To-Do\n\n- Doing：可以插單，直接把任務貼到此\n\n- Done：Deploy 不限制\n\n\n\n### Scrum\n\n\n\n- 角色\n\n    - Product Owner\n\n    - Scrum Master：幫助 Scrum 運行，常由 PM 兼\n\n    - Team\n\n- Product Backlog：想要的功能\n\n- Sprint：開發週期，從 Backlog 選進任務，定下時限，因為要遵守時間所以不能插單，做完統一 Deploy\n\n    - To-Do\n\n    - Doing\n\n    - Done\n\n- Story Points：正規上是開發難度，需為費茲數列，藉此估計時間，但很常是直接估小時\n\n- Daily Standup：開發時每天會有一小段討論，昨天完成的事務、今天計畫要做的事務、Blocker 困擾的事\n\n- 隔週四 Deploy→隔週五 Demo、Sprint Retrospective 檢討\n\n\n\n# Deploy 部署\n\n\n\n## 環境\n\n\n\n- local：本機\n\n- development：真實伺服器\n\n- staging / qa：與 production 相似但不公開\n\n- production\n\n\n\n# 測試\n\n\n\n## SIT （System Integration Testing）\n\n\n\n不看程式碼，看功能是否正確。\n\n\n\n## UAT（User Acceptance Testing）\n\n\n\n實際使用者的測試。",
    CategoryId: 1
  }
];

module.exports = {
  contents
};
